{
    "beaker": "2",
    "evaluators": [
        {
            "name": "Html",
            "plugin": "Html",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "Latex",
            "plugin": "Latex",
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "IPython",
            "plugin": "IPython",
            "imports": "",
            "supplementalClassPath": "",
            "view": {
                "cm": {
                    "mode": "python"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "jsSetting2": "",
            "jsSetting1": "",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            }
        },
        {
            "name": "R",
            "plugin": "R",
            "view": {
                "cm": {
                    "mode": "r"
                }
            }
        },
        {
            "name": "Groovy",
            "plugin": "Groovy",
            "view": {
                "cm": {
                    "mode": "groovy"
                }
            },
            "imports": "com.twosigma.beaker.chart.Color\ncom.twosigma.beaker.chart.xychart.*\ncom.twosigma.beaker.chart.xychart.plotitem.*"
        }
    ],
    "cells": [
        {
            "id": "section001",
            "type": "section",
            "level": 1,
            "title": "Autotranslation: communicating among languages",
            "collapsed": false,
            "evaluatorReader": false
        },
        {
            "id": "textNi07gO",
            "type": "text",
            "body": [
                "<div>Beaker can autotranslate variables in one language to another. &nbsp;You can access this feature with the notebook namespace: a collection of variables and their values stored in the notebook. &nbsp;You can use this to produce data in one language, and consume or process it in another.</div><div><br></div><div>Because the namespace is in the notebook, the variable's values are preserved when you save a notebook to disk, or share it on the web. &nbsp;The format for data interchange is JSON.</div><div><br></div><div>The four languages that are supported are IPython, R, Groovy, and JavaScript.</div>"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeMXyZnW",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "beaker.x = \"Strings work fine\""
                ]
            },
            "output": {
                "selectedType": "BeakerDisplay",
                "outputArrived": false,
                "elapsedTime": 76,
                "state": {},
                "result": ""
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeGNNbIg",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "beaker.x"
                ]
            },
            "output": {
                "selectedType": "Text",
                "state": {},
                "result": "Strings work fine"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "text8CJDEu",
            "type": "text",
            "body": [
                "In R you need to call a function:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "code4NkMTF",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "beaker::get('x')"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 74,
                "state": {},
                "result": "[1] \"Strings work fine\""
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "textqT83Q0",
            "type": "text",
            "body": [
                "In Groovy, you can either call a function, or access the namespace as properties:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeL7598T",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "beaker.get('x') + beaker.x"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 190,
                "state": {},
                "result": "Strings work fineStrings work fine"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "text9L6SMV",
            "type": "text",
            "body": [
                "Nested data structures and arrays are supported:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeuP2kh6",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "beaker.y = {a:1, b:2.2, c:\"three\", d:[4, 5, 6]};"
                ]
            },
            "output": {
                "selectedType": "Text",
                "state": {},
                "result": "[object Object]"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeeLdoVF",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "beaker.y"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 172,
                "result": "{a=1, b=2.2, c=three, d=[4, 5, 6]}",
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "sectionWXeHmf",
            "type": "section",
            "title": "Scalars in R",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "text3lTKGy",
            "type": "text",
            "body": [
                "A quirk of the R language is that there are no scalars, everything is a vector. &nbsp;So \"10\" is really an array of length one, written \"[10]\" in most other languages:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeEh6ibk",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "beaker::set('z', 12)"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 149,
                "result": "[1] 12",
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeNydW3I",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "beaker.z"
                ]
            },
            "output": {
                "outputArrived": true,
                "selectedType": "BeakerDisplay",
                "elapsedTime": 87,
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Html",
                    "object": "<div class=\"out_prompt_overlay prompt\" title=\"click to expand output; double click to hide output\" style=\"display: none;\"></div><div class=\"output\" style=\"display: none;\"></div><div class=\"btn output_collapsed\" title=\"click to expand output\" style=\"display: none;\">. . .</div><div class=\"output_subarea output_text\"><pre>[12]</pre></div>"
                },
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "textZQtpZU",
            "type": "text",
            "body": [
                "To access it as a scalar, just index out the first element:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "code3eQahz",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "beaker.z[0] * 2"
                ]
            },
            "output": {
                "outputArrived": true,
                "selectedType": "Text",
                "elapsedTime": 234,
                "result": "24",
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "textA2RUxj",
            "type": "text",
            "body": [
                "In reverse, it has no problems translating scalars from other languages to R:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeKBVTUw",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "beaker.zz = 13"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 173,
                "result": "13",
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeOU5Hsk",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "beaker::get('zz')"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 163,
                "result": "[1] 13",
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "section21LFDr",
            "type": "section",
            "title": "Data Frames",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "textRAPjY4",
            "type": "text",
            "body": [
                "An important complex structure in R and Python's Pandas library is the Data Frame, essentially a table with named columns. &nbsp;They go through autotranslation like so:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codetsCQ0F",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "import pandas",
                    "beaker.df = pandas.DataFrame(np.random.randn(6, 4), columns=list('ABCD'))"
                ]
            },
            "output": {
                "outputArrived": false,
                "selectedType": "BeakerDisplay",
                "elapsedTime": 83,
                "result": "",
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 2
        },
        {
            "id": "text8tNp2l",
            "type": "text",
            "body": [
                "In languages without a Data Frame type, they show up as a dictionary of arrays:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeKUuJGm",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "beaker.df"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 352,
                "result": "{A=[-1.6477148263423198, -1.0319267141492479, -0.33535300802103885, -0.2617041669452302, -0.36017470994956774, -0.9083819813746922], C=[-0.7520307183214043, -2.995012104137036, -0.8906497041010882, -1.0013447745565598, -0.5365149585865382, 0.18499102747102286], B=[0.656691368937058, 0.23316175427766148, -2.0492868750079145, -0.1797312548950017, 1.3907867963519758, -0.3845463586420884], D=[1.4147645784316016, 1.5435841661552956, 0.7290453120110677, 0.5784299692982977, -0.5332254019968061, -0.10440890369952463]}",
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "textT2NWWl",
            "type": "text",
            "body": [
                "When auto-translating a data frame to R and Python, you need to call the constructor to set the type of the result."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codej0d66h",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "data.frame(beaker::get('df'))"
                ]
            },
            "output": {
                "selectedType": "Table",
                "elapsedTime": 172,
                "result": {
                    "type": "TableDisplay",
                    "columnNames": [
                        "A",
                        "C",
                        "B",
                        "D"
                    ],
                    "values": [
                        [
                            "-1.6477148263423198",
                            "-0.7520307183214043",
                            "0.656691368937058",
                            "1.4147645784316016"
                        ],
                        [
                            "-1.0319267141492479",
                            "-2.995012104137036",
                            "0.23316175427766148",
                            "1.5435841661552956"
                        ],
                        [
                            "-0.33535300802103885",
                            "-0.8906497041010882",
                            "-2.0492868750079145",
                            "0.7290453120110677"
                        ],
                        [
                            "-0.2617041669452302",
                            "-1.0013447745565598",
                            "-0.1797312548950017",
                            "0.5784299692982977"
                        ],
                        [
                            "-0.36017470994956774",
                            "-0.5365149585865382",
                            "1.3907867963519758",
                            "-0.5332254019968061"
                        ],
                        [
                            "-0.9083819813746922",
                            "0.18499102747102286",
                            "-0.3845463586420884",
                            "-0.10440890369952463"
                        ]
                    ]
                },
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeIkZtDp",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "beaker::set('df2', data.frame(matrix(rnorm(20), nrow=10)))"
                ]
            },
            "output": {
                "selectedType": "Table",
                "elapsedTime": 146,
                "result": {
                    "type": "TableDisplay",
                    "columnNames": [
                        "X1",
                        "X2"
                    ],
                    "values": [
                        [
                            "-0.7145402550389948",
                            "1.7950590366647712"
                        ],
                        [
                            "0.7413582345062021",
                            "-2.5274232064364375"
                        ],
                        [
                            "-0.06455425977734186",
                            "0.15058337259066018"
                        ],
                        [
                            "-0.5364405464136373",
                            "1.0810866009535758E-4"
                        ],
                        [
                            "-2.777394352421139",
                            "1.280270388778087"
                        ],
                        [
                            "1.199255331879474",
                            "0.37712837026434654"
                        ],
                        [
                            "-1.206322332944251",
                            "-0.2134031711968091"
                        ],
                        [
                            "-0.02545367139969172",
                            "-0.888771608805991"
                        ],
                        [
                            "-1.9383108950148775",
                            "0.37745431484413433"
                        ],
                        [
                            "-0.5841266690308748",
                            "-1.2912797225723405"
                        ]
                    ]
                },
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeNYJvKz",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "pandas.DataFrame(beaker.df2)"
                ]
            },
            "output": {
                "outputArrived": true,
                "selectedType": "Table",
                "elapsedTime": 115,
                "result": {
                    "type": "TableDisplay",
                    "tableDisplayModel": {
                        "columnNames": [
                            "",
                            "X1",
                            "X2"
                        ],
                        "values": [
                            [
                                "0",
                                "-0.714540",
                                " 1.795100"
                            ],
                            [
                                "1",
                                " 0.741360",
                                "-2.527400"
                            ],
                            [
                                "2",
                                "-0.064554",
                                " 0.150580"
                            ],
                            [
                                "3",
                                "-0.536440",
                                " 0.000108"
                            ],
                            [
                                "4",
                                "-2.777400",
                                " 1.280300"
                            ],
                            [
                                "5",
                                " 1.199300",
                                " 0.377130"
                            ],
                            [
                                "6",
                                "-1.206300",
                                "-0.213400"
                            ],
                            [
                                "7",
                                "-0.025454",
                                "-0.888770"
                            ],
                            [
                                "8",
                                "-1.938300",
                                " 0.377450"
                            ],
                            [
                                "9",
                                "-0.584130",
                                "-1.291300"
                            ]
                        ]
                    },
                    "columnNames": [
                        "",
                        "X1",
                        "X2"
                    ],
                    "values": [
                        [
                            "0",
                            "-0.714540",
                            " 1.795100"
                        ],
                        [
                            "1",
                            " 0.741360",
                            "-2.527400"
                        ],
                        [
                            "2",
                            "-0.064554",
                            " 0.150580"
                        ],
                        [
                            "3",
                            "-0.536440",
                            " 0.000108"
                        ],
                        [
                            "4",
                            "-2.777400",
                            " 1.280300"
                        ],
                        [
                            "5",
                            " 1.199300",
                            " 0.377130"
                        ],
                        [
                            "6",
                            "-1.206300",
                            "-0.213400"
                        ],
                        [
                            "7",
                            "-0.025454",
                            "-0.888770"
                        ],
                        [
                            "8",
                            "-1.938300",
                            " 0.377450"
                        ],
                        [
                            "9",
                            "-0.584130",
                            "-1.291300"
                        ]
                    ]
                },
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "textJi6Elj",
            "type": "text",
            "body": [
                "We are considering how to more automatically detect complex types, and also how to allow the user to define their own types. &nbsp;Again, your feedback is appreciated."
            ],
            "evaluatorReader": false
        }
    ],
    "namespace": {
        "x": "Strings work fine",
        "y": {
            "a": 1,
            "b": 2.2,
            "c": "three",
            "d": [
                4,
                5,
                6
            ]
        },
        "z": [
            12
        ],
        "zz": 13,
        "df": {
            "A": [
                -1.6477148263423198,
                -1.0319267141492479,
                -0.33535300802103885,
                -0.2617041669452302,
                -0.36017470994956774,
                -0.9083819813746922
            ],
            "C": [
                -0.7520307183214043,
                -2.995012104137036,
                -0.8906497041010882,
                -1.0013447745565598,
                -0.5365149585865382,
                0.18499102747102286
            ],
            "B": [
                0.656691368937058,
                0.23316175427766148,
                -2.0492868750079145,
                -0.1797312548950017,
                1.3907867963519758,
                -0.3845463586420884
            ],
            "D": [
                1.4147645784316016,
                1.5435841661552956,
                0.7290453120110677,
                0.5784299692982977,
                -0.5332254019968061,
                -0.10440890369952463
            ]
        },
        "df2": {
            "X1": [
                -0.71454,
                0.74136,
                -0.064554,
                -0.53644,
                -2.7774,
                1.1993,
                -1.2063,
                -0.025454,
                -1.9383,
                -0.58413
            ],
            "X2": [
                1.7951,
                -2.5274,
                0.15058,
                0.00010811,
                1.2803,
                0.37713,
                -0.2134,
                -0.88877,
                0.37745,
                -1.2913
            ]
        }
    }
}
